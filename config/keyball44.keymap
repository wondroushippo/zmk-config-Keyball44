#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&nice_view_spi { cs-gpios = <&pro_micro 1 GPIO_ACTIVE_HIGH>; };

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "hold-preferred";
    quick-tap-ms = <190>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {

    behaviors {

        mtcaps: mod_tap_caps {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <0>;
            flavor = "hold-preferred";
            tapping-term-ms = <400>;
            bindings = <&kp LCTRL>, <&kp CAPS>;
            display-name = "Mod-Tap-Caps";
        };
    };
};

/**
 * Temporarily switches to a layer (`&mo`) while a modifier is held.
 * Analogous to QMK's `LM()`, using a parameterized macro.
 *
 * Params:
 *  1. Layer to switch to
 *  2. Modifier to press while layer is active
 *
 * Example:
 *  `&lm NUM_LAYER LSHIFT`
 */
            lm: lm {
                compatible = "zmk,behavior-macro-two-param";
                wait-ms = <0>;
                tap-ms = <0>;
                #binding-cells = <2>;
                bindings
                    = <&macro_param_1to1>
                    , <&macro_press &mo MACRO_PLACEHOLDER>
                    , <&macro_param_2to1>
                    , <&macro_press &kp MACRO_PLACEHOLDER>
                    , <&macro_pause_for_release>
                    , <&macro_param_2to1>
                    , <&macro_release &kp MACRO_PLACEHOLDER>
                    , <&macro_param_1to1>
                    , <&macro_release &mo MACRO_PLACEHOLDER>
                    ;
};
//    };

    combos {
        compatible = "zmk,combos";

        default_bootloader_r {
            bindings = <&bootloader>;
            key-positions = <10 11 6 7>;
        };

        default_bootloader_l {
            bindings = <&bootloader>;
            key-positions = <0 1 4 5>;
        };

        ALT_LEFT {
            bindings = <&kp LEFT_ALT>;
            key-positions = <16 28>;
        };

        GUI_LEFT {
            bindings = <&kp LEFT_GUI>;
            key-positions = <27 15>;
        };

        CTRL_LEFT {
            bindings = <&mt LCTRL ESCAPE>;
            key-positions = <14 26>;
        };

        LMEH_TAB {
            bindings = <&mt LA(LS(LCTRL)) TAB>;
            key-positions = <17 29>;
        };

        HYPHEN_RIGHT {
            bindings = <&kp MINUS>;
            key-positions = <19 7>;
        };

        EN-DASH {
            bindings = <&kp LA(MINUS)>;
            key-positions = <6 18>;
        };

        RMEH_BSLASH {
            bindings = <&mt LS(LA(LCTRL)) BACKSLASH>;
            key-positions = <18 30>;
        };

        DELETE_LEFT {
            bindings = <&kp DEL>;
            key-positions = <5 17>;
            layers = <0>;
        };

        SPACE_LEFT {
            bindings = <&kp SPACE>;
            key-positions = <16 4>;
        };

        NUM_TOGGLE {
            bindings = <&tog 2>;
            key-positions = <0 12>;
        };

        ALT_RIGHT {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <19 31>;
        };

        GUI_RIGHT {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <20 32>;
        };

        CTRL_RIGHT {
            bindings = <&mt RCTRL ESCAPE>;
            key-positions = <21 33>;
        };

        BSLS_COMBO {
            bindings = <&kp BACKSLASH>;
            key-positions = <22 34>;
        };

        ENTER_LEFT {
            bindings = <&kp ENTER>;
            key-positions = <3 15>;
        };

        ENTER_RIGHT {
            bindings = <&kp ENTER>;
            key-positions = <20 8>;
        };

        STAR_NUMPAD {
            bindings = <&kp ASTERISK>;
            key-positions = <5 17>;
            layers = <2>;
        };

        EQUAL_COMBO {
            bindings = <&kp EQUAL>;
            key-positions = <9 21>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp TAB               &kp Q           &kp W        &kp E                &kp R        &kp T                   &kp Y        &kp U  &kp I      &kp O    &kp P      &kp MINUS
&mt LCTRL ESCAPE      &kp A           &kp S        &kp D                &kp F        &kp G                   &kp H        &kp J  &kp K      &kp L    &kp SEMI   &kp SQT
&kp LEFT_SHIFT        &kp Z           &kp X        &kp C                &kp V        &kp B                   &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH  &kp RIGHT_SHIFT
&kp LS(LA(LCTRL))     &lm 2 LS(LALT)  &lt 1 ENTER  &mt LCTRL BACKSPACE  &lt 2 ENTER                          &lt 2 ENTER  &kp SPACE                           &mo 4
            >;
        };

        shortcut_layer {
            label = "SHORT";
            bindings = <
&trans                    &kp NUMBER_1       &kp NUMBER_2       &kp NUMBER_3   &kp NUMBER_4   &kp NUMBER_5               &kp NUMBER_6    &kp NUMBER_7     &kp NUMBER_8  &kp NUMBER_9          &kp NUMBER_0           &trans
&mtcaps                   &kp EXCLAMATION    &kp AT_SIGN        &kp HASH       &kp DOLLAR     &kp PERCENT                &kp CARET       &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&mt LEFT_SHIFT LA(LC(V))  &kp LS(LA(LC(Z)))  &kp LS(LC(LA(X)))  &kp LC(LA(M))  &kp LC(LS(V))  &kp LA(LS(N5))             &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp F13       &kp LC(LA(LS(V)))     &kp BACKSLASH          &mt RSHFT BACKSLASH
&trans                    &trans             &trans             &trans         &trans                             &mo 3  &trans                                                                                      &trans
            >;
        };

        numpad_layer {
            label = "NUMPAD";
            bindings = <
&kp KP_NLCK        &kp TAB    &kp N7  &kp N8  &kp N9  &kp FSLH               &kp HOME  &kp PG_DN  &kp PG_UP     &kp END       &kp LS(TILDE)  &kp DEL
&mt LCTRL ESCAPE   &kp N0     &kp N4  &kp N5  &kp N6  &kp DOT                &kp LEFT  &kp DOWN   &kp UP        &kp RIGHT     &kp LA(MINUS)  &kp PIPE
&trans             &kp RET    &kp N1  &kp N2  &kp N3  &kp MINUS              &kp LBKT  &kp RBKT   &kp LS(LBRC)  &kp LS(RBRC)  &kp GRAVE      &mt RSHFT BSLH
&kp PLUS           &kp EQUAL  &mo 3   &trans  &trans                 &trans  &trans                                                          &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&out OUT_USB     &kp F1         &kp F2         &kp F3         &kp F4         &kp F5                     &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
&kp CAPS         &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4               &trans  &trans  &trans  &trans  &trans   &kp F12
&out OUT_BLE     &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4              &trans  &trans  &trans  &trans  &trans   &trans
&bt BT_CLR       &trans         &trans         &trans         &trans                            &trans  &trans                                   &trans
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&trans  &kp LC(W)  &kp LC(R)  &mkp MB4         &mkp MB5     &trans                   &trans        &trans     &trans     &trans        &trans        &to 0
&trans  &tog 5     &mo 5      &mkp MB2         &mkp MB1     &mkp MB3                 &kp LEFT_GUI  &kp LSHFT  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &trans
&trans  &tog 6     &mo 6      &kp LC(LS(TAB))  &kp LC(TAB)  &trans                   &trans        &trans     &trans     &trans        &trans        &trans
&trans  &trans     &trans     &mo 6            &mo 5                      &mkp RCLK  &mkp LCLK                                                       &trans
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans    &trans       &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &tog 5  &trans  &mkp MB2  &mkp MB1     &mkp MB3            &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans    &trans       &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans    &trans                   &trans  &trans                                  &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&bootloader  &trans  &trans  &trans    &trans    &trans              &trans  &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &mkp MB2  &mkp MB1  &mkp MB3            &trans  &trans  &trans  &trans  &trans  &trans
&trans       &tog 6  &trans  &trans    &trans    &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans  &trans  &trans    &trans                &trans  &trans                                  &trans
            >;
        };
    };
};
